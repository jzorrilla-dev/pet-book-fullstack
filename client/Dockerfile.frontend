# Primera etapa: Construir la aplicación de React
# Usamos una imagen de Node.js como base para compilar el proyecto
FROM node:22-alpine AS builder

# Establecer el directorio de trabajo dentro del contenedor
WORKDIR /app

# Copiar los archivos package.json y package-lock.json
# Esto permite que Docker use el caché de la capa si los archivos no cambian
COPY package*.json ./

# Instalar las dependencias de Node
RUN npm install

# Copiar el resto de los archivos del proyecto
COPY . .

# Compilar el proyecto de React para producción
# El comando 'npm run build' crea la carpeta 'build' con los archivos estáticos
RUN npm run build

# Segunda etapa: Servir la aplicación compilada con Nginx
# Usamos una imagen ligera de Nginx como servidor web
FROM nginx:alpine

# Copiar los archivos estáticos compilados desde la etapa 'builder'
# Los archivos se copian a la carpeta de Nginx que sirve los archivos por defecto
COPY --from=builder /app/build /usr/share/nginx/html

# Exponer el puerto 80 del contenedor, que es el puerto por defecto de Nginx
EXPOSE 80

# El comando por defecto de Nginx para iniciar el servidor
CMD ["nginx", "-g", "daemon off;"]